#!/usr/bin/env python
# -*- coding: utf8 -*-
from __future__ import print_function
import os
import sys
import re
import traceback
import subprocess
import pprint
# import cStringIO
import time


def error(txt):
    print(txt, file=sys.stderr)

def verbose(txt):
    if args.verbose:
        print(txt)

def debug(txt):
    if args.debug:
        print(txt)


class TreeNode():
    """generic tree implementation, with parent/child and prev/next relations"""
    def __init__(self, name, parent=None, next=None, prev=None, *args, **kwargs):
        self.childs={}

        self.name=name
        self.parent=parent
        if parent:
            if name in parent.childs:
                raise(Exception("parent {} already has child {}").format(parent.name, name))
            parent.childs[name]=self


        self.next=next
        if next:
            if next.prev:
                raise(Exception("{} already has a previous item").format(next.name))
            next.prev=self

        self.prev=prev
        if prev:
            if prev.next:
                raise(Exception("{} already has a next item").format(prev.name))
            prev.next=self


    def remove(self):
        """remove the item from other referenced TreeNodes. call before you actually delete a treeobject"""

        if self.parent:
            self.parent.childs.remove(self.name)


        # let previous and next objects point to eachother
        if self.next:
            self.next.prev=self.prev

        if self.prev:
            self.prev.next=self.next

        self.parent=None
        self.next=None
        self.prev=None



class ZfsNode(TreeNode):
    """an endpoint that contains zfs filesystems.

    contains lowlevel zfs wrappers for actual zfs commands on remote nodes via ssh (or local)

    methods only accept and return simple dataset names, just like the real commands
    """

    def __init__(self, ssh_to, *args, **kwargs):
        """ssh_to: server you want to ssh to. specify 'local' to just use local commands without ssh"""

        super().__init__(*args, **kwargs)
        self.ssh_to=ssh_to


    def run(cmd, input=None, tab_split=False, valid_exitcodes=[ 0 ], test=False):
        """run a command on the node"""

        encoded_cmd=[]

        #use ssh?
        if self.ssh_to != "local":
            encoded_cmd.extend(["ssh", self.ssh_to])

            #make sure the command gets all the data in utf8 format:
            #(this is neccesary if LC_ALL=en_US.utf8 is not set in the environment)
            for arg in cmd:
                #add single quotes for remote commands to support spaces and other wierd stuff (remote commands are executed in a shell)
                encoded_cmd.append( ("'"+arg+"'").encode('utf-8'))

        else:
            for arg in cmd:
                encoded_cmd.append(arg.encode('utf-8'))

        #debug and test stuff
        debug_txt="# "+" ".join(encoded_cmd)

        if test:
            debug("[SKIPPING] "+debug_txt)
        else:
            debug(debug_txt)

        if input:
            debug("INPUT:\n"+input.rstrip())
            stdin=subprocess.PIPE
        else:
            stdin=None

        if test:
            return

        #execute and parse/return results
        p=subprocess.Popen(encoded_cmd, env=os.environ, stdout=subprocess.PIPE, stdin=stdin)
        output=p.communicate(input=input)[0]
        if p.returncode not in valid_exitcodes:
            raise(subprocess.CalledProcessError(p.returncode, encoded_cmd))

        lines=output.splitlines()
        if not tab_split:
            return(lines)
        else:
            ret=[]
            for line in lines:
                ret.append(line.split("\t"))
            return(ret)




class ZfsPool(TreeNode):
    """a zfs pool"""
    def __init__(self, *kwargs, **args):
        super().__init(*args, **kwargs)



class ZfsDataset:
    """a generic zfs dataset"""

    def __init__(name, parent):
        """
        """
        self.name=name
        self.parent=parent
        self.created=created
        self.backup=backup

        self.childs={}


class ZfsSnapshot(Dataset):
    """A zfs snapshot"""
    def __init__(previous_snapshot=false, next_snapshot=fase, keep_time=false, timestamp=false, **kwargs, *args):
        super.__init__(**kargs, *args)
        self.timestamp
        self.keep_time
        self.previous_snapshot
        self.next_snapshot


# class ZfsBackupSource():
#     """backup source.
#
#     contains high level backup source functions.
#
#     these work with ZfsDataset and ZfsSnapshot objects.
#
#     """
#
#     def __init__(self):
#         self.node=ZfsNode(ssh_to=args.ssh_to)
#         self.datasets={}
#         self.snapshots={}
#
#
#     def refresh():
#         """refresh all data by calling various zfs commands"""
#         selected_filesystems=self.node.zfs_get_selected_filesystems()
